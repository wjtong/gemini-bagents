# Cursor Rules for OpenAI GPT LangGraph Research Agent

## 项目概述
这是一个基于LangGraph的研究代理项目，使用OpenAI GPT模型进行智能搜索和回答生成。项目包含React前端和Python后端，采用全栈架构。

## 技术栈
- **后端**: Python 3.11+, LangGraph, LangChain, FastAPI, OpenAI
- **前端**: React 19, TypeScript, Vite, Tailwind CSS, Shadcn UI
- **部署**: Docker, Docker Compose
- **AI模型**: OpenAI GPT (GPT-4o, GPT-4o-mini, GPT-4-turbo)

## 代码规范

### Python 后端规范
- 使用Python 3.11+语法
- 遵循Google风格的docstring
- 使用类型注解
- 使用Ruff进行代码格式化
- 使用Pydantic进行数据验证
- 环境变量使用`os.getenv()`获取

### TypeScript/React 前端规范
- 使用React 19和TypeScript
- 使用函数组件和Hooks
- 使用Tailwind CSS进行样式
- 使用Shadcn UI组件库
- 使用Vite作为构建工具

### 文件命名规范
- Python文件使用snake_case
- TypeScript/React文件使用PascalCase
- 组件文件以.tsx结尾
- 工具函数文件以.ts结尾

## 项目结构
```
├── backend/                 # Python后端
│   ├── src/agent/          # 核心代理逻辑
│   ├── examples/           # CLI示例
│   └── pyproject.toml     # Python依赖配置
├── frontend/               # React前端
│   ├── src/components/     # React组件
│   ├── src/lib/           # 工具函数
│   └── package.json       # Node.js依赖配置
├── docker-compose.yml      # Docker编排
└── Dockerfile             # Docker构建
```

## LangGraph 特定规范

### 状态管理
- 使用Pydantic模型定义状态结构
- 状态更新使用字典返回
- 使用`StateGraph`构建工作流

### 节点函数
- 每个节点函数都有清晰的docstring
- 使用类型注解定义输入输出
- 错误处理使用try-catch

### 配置管理
- 使用`Configuration`类管理配置
- 支持环境变量覆盖
- 使用`RunnableConfig`传递配置

## OpenAI 集成规范

### API调用
- 使用`langchain_openai.ChatOpenAI`
- 设置适当的temperature和max_retries
- 使用结构化输出`with_structured_output()`

### 模型选择
- 查询生成: `gpt-4o-mini`
- 反思分析: `gpt-4o`
- 最终回答: `gpt-4o`

### 环境变量
- 必须设置`OPENAI_API_KEY`
- 使用`python-dotenv`加载环境变量

## 前端开发规范

### 组件结构
- 使用函数组件
- 使用TypeScript接口定义props
- 使用React Hooks管理状态

### 样式规范
- 使用Tailwind CSS类名
- 使用Shadcn UI组件
- 响应式设计优先

### 状态管理
- 使用useState管理本地状态
- 使用useEffect处理副作用
- 使用useRef管理DOM引用

## 错误处理

### 后端错误处理
- 使用try-catch包装API调用
- 提供有意义的错误消息
- 记录错误日志

### 前端错误处理
- 使用错误边界
- 显示用户友好的错误消息
- 提供重试机制

## 性能优化

### 后端优化
- 使用异步函数处理I/O操作
- 缓存频繁使用的数据
- 优化数据库查询

### 前端优化
- 使用React.memo优化渲染
- 使用useCallback和useMemo
- 懒加载组件

## 测试规范

### 后端测试
- 使用pytest进行单元测试
- 测试所有节点函数
- 模拟外部API调用

### 前端测试
- 使用React Testing Library
- 测试组件渲染和交互
- 测试异步操作

## 部署规范

### Docker配置
- 使用多阶段构建
- 优化镜像大小
- 设置健康检查

### 环境变量
- 使用.env文件管理环境变量
- 在Docker Compose中设置变量
- 不要在代码中硬编码敏感信息

## 文档规范

### 代码注释
- 使用Google风格的docstring
- 解释复杂的业务逻辑
- 提供使用示例

### README文档
- 包含项目概述
- 提供安装和运行说明
- 说明API使用方法

## 安全规范

### API安全
- 验证输入数据
- 使用HTTPS
- 限制API调用频率

### 数据安全
- 加密敏感数据
- 使用安全的数据库连接
- 定期更新依赖

## 开发工作流

### Git规范
- 使用有意义的提交消息
- 创建功能分支
- 使用Pull Request

### 代码审查
- 检查代码质量
- 验证功能完整性
- 确保测试覆盖

## 常见模式

### LangGraph节点模式
```python
def node_function(state: StateType, config: RunnableConfig) -> StateType:
    """节点函数docstring"""
    configurable = Configuration.from_runnable_config(config)
    # 业务逻辑
    return {"key": "value"}
```

### React组件模式
```typescript
interface ComponentProps {
  // props定义
}

export const Component: React.FC<ComponentProps> = ({ prop1, prop2 }) => {
  // 组件逻辑
  return <div>...</div>;
};
```

### 配置模式
```python
class Configuration(BaseModel):
    """配置类"""
    field: str = Field(default="value", description="描述")
```

## 注意事项

1. **模型选择**: 根据任务复杂度选择合适的GPT模型
2. **API限制**: 注意OpenAI API的速率限制和成本
3. **错误处理**: 始终处理API调用可能的失败
4. **用户体验**: 提供加载状态和错误反馈
5. **可扩展性**: 设计支持添加新功能的架构

## 最佳实践

1. 使用类型注解提高代码可读性
2. 编写清晰的文档和注释
3. 遵循单一职责原则
4. 保持代码简洁和可维护
5. 定期更新依赖包
6. 进行代码审查和测试 